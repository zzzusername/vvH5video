<template>
	<el-dialog  title="权限分配" 
		:visible.sync="assignPopchild"
		:before-close="cancelNewdata"
		:close-on-click-modal='false'
		width="55%"
		id="commonPopchild"
		>
		<el-form  ref="edit" label-width="44%" class="demo-ruleForm" 
		v-loading="formLoading"
		element-loading-text="加载中"
		element-loading-spinner="el-icon-loading"
		element-loading-background="initial"
		>
			<div class="formTable">
				<div class="block block-line">
					<el-form-item label="姓名：" :rules="[{ required: true, message: ' '}]">
						<el-input v-model="addForm.realname" maxlength="50"></el-input>
					</el-form-item>
				</div>  
				<div class="block block-line">
					<el-form-item label="用户类型：" :rules="[{ required: true, message: ' '}]">
						<el-select v-model="prisegRoupsvalue"  placeholder="--请选择--">
							<el-option v-for="item in prisegRoupsdata" 
							:key="item.index" :label="item.name" :value="item.type"></el-option>
						</el-select>
					</el-form-item>
				</div>
				<div class="block block-line">
					<el-form-item label="权限分配方式：" :rules="[{ required: true, message: ' '}]">
						<div class="checkboxBg">
							<el-radio-group v-model="addForm.permissionAllocationmode" @change="permissionModechange">
								<el-radio label="1">权限分组</el-radio>
								<el-radio label="2">直接分配</el-radio>
							</el-radio-group>
						</div>
					</el-form-item>
				</div>
				<div class="block block-line">
					<el-form-item label="权限分组：">
						<el-select v-model="rightsGroupvalue"  placeholder="--请选择--" @change="updateCacheinformation" :disabled='rightsDisabled'>
							<el-option v-for="item in rightsGroupdata" 
							:key="item.index" :label="item.name" :value="item.id"></el-option>
						</el-select>
					</el-form-item>
				</div>
				<div class="block" id="streamingMedia">
					<el-form-item label="指定流媒体服务器：" label-width="22%" :rules="[{ required: true, message: ' '}]">
						<el-select v-model="streamingMediavalue"
								placeholder="请选择" class="tabSelect" 
								multiple
								@change="streamingMediachange" 
								>
								<el-option
								v-for="item in streamingMediadata"
								:key="item.id"
								:label="item.server_name"
								:value="item.id"
								>
								</el-option>
						</el-select>
					</el-form-item>
				</div>
				<div class="block" id="areaSelectpopover">
					<el-form-item label="地区：" label-width="22%">
						<el-input 
						v-model="information.region_full_name" 	
						maxlength="50"
						@focus="isShowregionFulldata = true"
						></el-input>
						<div class="treeCont" v-if="isShowregionFulldata">
							<el-tree
								:props="props"
								:load="regionFulltree"
								lazy
								accordion
								v-if="isShowregionFulldata"
								@current-change="synchronouRegionsdata" 
							>
							</el-tree>
						</div>
						<span class="close"  v-if="isShowregionFulldata" @click="closeShowregionFulldata">
							<img src="../../assets/close.png" alt="close">
						</span>
					</el-form-item>
				</div>
				<div id="tabChagecont"
					v-loading="tabLoading"
					element-loading-text="加载中"
					element-loading-spinner="el-icon-loading"
					element-loading-background="initial"
					style="overflow:hidden;"
					v-if="allocationType"
					>
					<!-- 监控 ／ 终端 tab切换-->
					<el-tabs v-model="activeName" 
						type="border-card" 
						style="padding:0 10px;">
						<el-tab-pane label="功能分配：" name="first"  class="tabSelectpane">
							<el-checkbox-group v-model="permissionsListvalue">
								<el-checkbox 
								v-for="item in permissionsList" :key="item.index"
								:label="item.name"
								>{{item.comment}}</el-checkbox>
							</el-checkbox-group>
						</el-tab-pane>
						<el-tab-pane label="监控资源分配：" name="second"  class="tabSelectpane">
							<div class="tabCont">
								<div class="hd monitorResourceshd">
									<span>监控平台地址：</span>
									<el-select v-model="monitorTheaddressValue"  placeholder="--请选择--" class="monitorResourcesSelect" @change='monitorAddresschange'>
										<el-option v-for="item in monitorTheaddressData" 
										:key="item.index" :label="item.name" :value="item.id"></el-option>
									</el-select>
								</div>
								<div class="bd">
									<div class="hd-l" style="height:260px; overflow-y:auto;">
										<!-- monitorDefaultchecked -->
										<el-tree
										:props="props"
										:data="monitor_resource_organizations"
										:load="monitorTherootDirectoryLoadnode"
										:render-content="renderMonitor"
										ref="monitorTree"
										node-key="unique_code"
										@check-change='monitorCheckchangdata'
										:default-checked-keys="monitorDefaultchecked"
										show-checkbox
										lazy=''
										>
										</el-tree>
									</div>
								</div>
							</div>
						</el-tab-pane>
						<el-tab-pane label="终端通讯录分配：" name="three"  class="tabSelectpane">
							<div class="tabCont">
								<div class="hd">
									<p class="termianServer">
										<span v-if='termainlServerinfo.ip'>{{termainlServerinfo.name}} ({{termainlServerinfo.ip}} : {{termainlServerinfo.port}})</span>	
										<span v-else>当前企业未分配监控资源服务器</span>
										<el-button  v-if='termainlServerinfo.ip' size="small" class="clear" @click="clearTerminatree">
											清空
										</el-button>
									</p>
								</div>
								<div class="bd">
									<div class="hd-l" style="height:260px; overflow-y:auto;">
										<el-tree
											:props="props"
											:data="terminal_regions"
											:load="terminaLoadnode"
											:render-content="renderContent"
											ref="terminaTree"
											node-key="unique_code"
											@check-change='termianCheckchangdata'
											:default-checked-keys="this.terminalDefaultchecked"
											lazy=''
											show-checkbox>
										</el-tree>
									</div>
								</div>
							</div>
						</el-tab-pane>
					</el-tabs>
				</div>
			</div>
			<div class="userBtn">
				<el-form-item>
					<el-button type="primary" @click="childSavedata">保存</el-button>
					<el-button @click="cancelNewdata()">取消</el-button>
				</el-form-item>
			</div>
		</el-form>
	</el-dialog>
</template>
<script>  
import $ from "jquery";
// listAssignableenterpriseGroups 权限分组
// listAssignablestreamServers 获取可分配的流媒体信息
// listAllocablefunctions 列出可分配的功能
// listAssignablemonitorServers 初始化监控下拉框
// listRootorganizationPaths 监控根节点获取
// listSuborganizations  监控子级 获取
// getRootterminalRegion  终端根节目录 获取
// userListgetTerminalserver 获取可分配的终端通讯录同步服务器信息
// listSubterminalRegionsandDeparts 列出终端通讯录子级地区目录和单位
// listSubterminalDeparts 列出终端通讯录子级单位
// userListsavePrivileges 保存企业用户已分配的权限信息
// getAssignableprivileges 获取企业用户已分配的权限信息
import {
	getAssignableprivileges,
	listAssignableenterpriseGroups,
	listAssignablestreamServers,
	listAllocablefunctions,
	listAssignablemonitorServers,
	listRootorganizationPaths,
	listSuborganizations,
	getRootterminalRegion,
	userListgetTerminalserver,
	listSubterminalRegionsandDeparts,
	listSubterminalDeparts,
	userListsavePrivileges,
		} from '../api/tabTree'
/* 用户审核页面API */
//  list_root_organization_paths 列出可分配的监控资源根目录路径
//  list_assignable_stream_servers 列出可分配的流媒体拉流服务器
//  list_assignable_monitor_servers 列出可分配的监控平台服务器（用于前端初始化下拉框）
//  list_assignable_functions  列出可分配的功能
//  get_assignable_privileges 列出可分配的企业权限组
//  get_root_terminal_region  获取可分配的终端通讯录地区根目录
//  get_terminal_server  获取可分配的终端通讯录同步服务器信息
import {
	list_root_organization_paths,
	list_assignable_stream_servers,
	list_assignable_monitor_servers,
	get_assignable_privileges,
	list_assignable_functions,
	get_root_terminal_region,
	get_terminal_server,
	apply_event_approve,
		} from '../api/tabTree'
/* 用户审核页面API */

import {heightAuto,arrayObjdeweighting} from '../untils/heightAuto' //注意路径

/* 地区相关接口 */
import {getRegiondetail,getRegionsbyPid,getPersonalinfo} from '../api/commonapi'
import {distinguishRole} from '../untils/heightAuto'
export default {
	props : {
		assignPopchild : Boolean,
		pageSource : Object,
	},
  	data: function() {
		return {
			// 来源父组件编辑数据
			gainFromparentPath : this.pageSource,
			props: {
				label: 'name',
				children: 'children',
			},
			tabLoading : false,
			formLoading : true,
			// tab 是否可编辑  权限分配方式  false  权限分配  true 直接分配
			allocationType : false,
			// tab 切换
			activeName: "first",
			// 编辑数据集合
			addForm : {
				realname : '',
				permissionAllocationmode : '',
			},
			// 页面来源 
			pageSourcedata : '',
			// 用户类型
			prisegRoupsdata : [
				{	
					name: "普通用户",
					type : 'USER',
				},
				{	
					name: "地区管理员",
					type : 'ENTERPRISE_DISTRICT_ADMIN',
				},
				{	
					name: "超级管理员",
					type : 'ENTERPRISE_SUPER_ADMIN',
				},
			],
			// 当前点击的用户id
			enterpriseUserid : '',
			prisegRoupsvalue : '',
			// 权限分组
			rightsGroupdata : [],
			rightsGroupvalue : '',
			// 缓存
			rightsGroupvalueCopy : '',
			// 是否可以编辑
			rightsDisabled : false,
			permissionsList : [],
			permissionsListvalue : [],
			// 流媒体 服务器
			streamingMediadata : [],
			streamingMediavalue: [],
			// 监控地址 下拉框
			EnterpriseCode : localStorage.EnterpriseCode ,
			monitorTheaddressData : [],
			monitorTheaddressValue : '',
			monitorTheaddressValueCopy : '',
			monitor_resource_organizations : [],
			// 是否查询涉密组织机构
			isSecurity : false,
			/* 监控数据 */
			monitorDefaultchecked : [],
			monitorDefaultcheckedCopy : [],
			
			/* 终端数据 */
			// 获取可分配的终端通讯录同步服务器信息
			termainlServerinfoId : '',
			termainlServerinfo: {},
			// tab 终端 初始化根节点数据
			terminal_regions : [],
			// tab 终端 默认勾选 通过 key 设置
			terminalDefaultchecked : [],	
			// copy 终端数据
			terminalDefaultcheckedCopy   : [],
			props: {
				label: 'name',
				children: 'children',
			},
			// 缓存 终端 懒加载信息
			termainNode : {},
			termainResolve : '',
			/* 终端数据 */
			// 弹窗按钮保存状态 
			saveSubmittype : true,
			// 企业用户申请事件ID  用户审核使用
			enterprise_apply_event_id : '',
			/* 地区相关 */
			// 地区提交数据
			information : {
				region_full_name : '',
				region_full_code : '',
				region_code : '',
				region_name : '',
			},
			InitRegionfulldata : {},
			isShowregionFulldata : false, 
			isDistrictadmin : localStorage.isDistrictadmin,
		};
	},
	mounted : function(){
		//console.log('根据页面来源调用相应的 api 接口  获取分配权限相应数据');
	},
	methods:{
		// 数据来源判断
		distinguishPagesources: function (data) {
			console.log(data);

			let path = data.path;
			let parentDetailId = data.id;
			console.log('页面来源' + path);
			// 获取个人和企业信息
			this.getInitpersonalInfo();
			// 用户列表页面
			if(path == 'USERLIST'){
				this.pageSourcedata = path;
				// 根据来源 初始化接口地址
				// 功能分配数据集合
				this.getInitpermissionsdata();
				// 终端 初始化接口
				this.getTerminalrootNodedirectory();
				// 终端同步的服务器信息
				this.getuserTerminalserver();
				// 列出 权限弹窗中 可分配的权限分组 （编辑）
				this.getInitrightsGroup();
				// 流媒体数据集合
				this.getInitstreamservers();
				// 监控地址
				this.getInitmonitorServers();

				// 获取相应数据 赋值
				this.userListgetInitdata(parentDetailId);
			}else if(path == 'USERCHECK'){

				this.enterprise_apply_event_id = data.id

				// 默认选择  权限分组 
				this.addForm.permissionAllocationmode = '1';
				this.prisegRoupsvalue = "USER";
				this.addForm.realname = data.realname

				this.pageSourcedata = path
				this.getInituserCheckterminalRegion();
				this.getInituserCheckterminalServer();
				this.getInituserCheckassignablePrivileges();
				this.getInituserCheckassignalbeFunctions();
				this.getInituserCheckassignalbeMonitorservers();
				this.getInituserCheckassignableStreamservers();
				this.getInituserCheckrootOrganizationpaths();
				
				this.formLoading = false;
			}

		},
		// 获取个人和企业信息 初始化地区根节点  
		//  isDistrictadmin	 地区管理员以管理地区为根节点  超级管理员以企业所在地区为根节点
		getInitpersonalInfo(){
			let _this = this;
			// 查询接口
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
				"account": localStorage.userPhone,
			}
			getPersonalinfo(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					console.log(res);
					if(res.data.data.is_district_admin){
						// 地区管理员
						console.log('地区管理员')
						_this.InitRegionfulldata.id = res.data.data.region_code
						_this.InitRegionfulldata.name = res.data.data.region_name
					}else{
						// 超级管理员
						console.log('超级管理员')
						_this.InitRegionfulldata.id = res.data.data.enterprise.region_code
						_this.InitRegionfulldata.name = res.data.data.enterprise.region_name
					}
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		/* 用户审核页面初始化信息 */
		//  获取可分配的终端通讯录地区根目录
		getInituserCheckterminalRegion(){
			// get_root_terminal_region
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
				"enterprise_user_id": localStorage.userId
			}
			get_root_terminal_region(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					//console.log(res);
					this.terminal_regions = res.data.data;
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		//  获取可分配的终端通讯录同步服务器信息
		getInituserCheckterminalServer(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
			}
			get_terminal_server(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.termainlServerinfoId = res.data.data ? res.data.data.id : '';
					this.termainlServerinfo = res.data.data;
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		// 列出可分配的企业权限组
		getInituserCheckassignablePrivileges(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
				"enterprise_user_id": localStorage.userId
			}
			get_assignable_privileges(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					console.log(res);
					this.rightsGroupdata = res.data.data;
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		// 列出可分配的功能
		getInituserCheckassignalbeFunctions(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId
			}
			list_assignable_functions(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.permissionsList = res.data.data;
					
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		//  列出可分配的监控平台服务器（用于前端初始化下拉框）
		getInituserCheckassignalbeMonitorservers(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId
			}
			list_assignable_monitor_servers(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.monitorTheaddressData = res.data.data;

					this.monitorTheaddressValue = res.data.data.length != 0 ? res.data.data[0].id : '' ;
					this.monitorTheaddressValueCopy = res.data.data.length != 0 ? res.data.data[0].id : '' ;

					// 加载一次 监控根节点数据
					this.MonitortherootDirectorynationwide
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		// 列出可分配的流媒体拉流服务器
		getInituserCheckassignableStreamservers(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId
			}
			list_assignable_stream_servers(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.streamingMediadata = res.data.data;
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		// 列出可分配的监控资源根目录路径
		getInituserCheckrootOrganizationpaths(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
				"enterprise_user_id": localStorage.userId,
				"monitor_server_id": this.monitorTheaddressValue,
			}
			list_root_organization_paths(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.streamingMediadata = res.data.data;
				}
			});	
		},
		/* 用户审核页面初始化信息 */
		// 获取详情数据
		userListgetInitdata(id){
			//  getAssignableprivileges
			let objData = {
				"enterprise_user_id": id,
				"enterprise_id": localStorage.EnterpriseId,
			}
			this.enterpriseUserid = id;
			getAssignableprivileges(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					console.log('详情信息');
					console.log(res);
					let rdData = res.data.data;
					// 详情信息赋值
					this.addForm.realname = rdData.realname	;												//姓名
					this.prisegRoupsvalue = rdData.user_type;												//用户类型
					this.permissionsListvalue = rdData.allocated_functions;									//功能分配
					this.streamingMediavalue = rdData.stream_server_ids;									//流媒体服务器
					this.rightsGroupvalue = rdData.enterprise_group_id	? rdData.enterprise_group_id :	'';	//企业用户所在权限组ID
					this.rightsGroupvalueCopy = rdData.enterprise_group_id	? rdData.enterprise_group_id :	'';	//企业用户所在权限组ID copy
					// 地区选择赋值
					this.information.region_full_name = rdData.region_name;
					this.information.region_code = rdData.region_code;
					this.information.region_name = rdData.region_name;
					
					
					// 监控 资源
					this.monitorDefaultchecked = rdData.monitor_resource_organizations
					this.monitorDefaultcheckedCopy = rdData.monitor_resource_organizations

					// 监控地址赋值 
					this.termainlServerinfoId = rdData.terminal_server_id
					
					//  terminal_regions 终端资源
					this.terminalDefaultchecked = rdData.terminal_regions
					this.terminalDefaultcheckedCopy = rdData.terminal_regions

					// 根据  权限分组 信息 判断 当前 分配方式
					if(rdData.enterprise_group_id){
						this.addForm.permissionAllocationmode = '1';
						// 权限分组
						this.allocationType = false;
						this.rightsDisabled = false;

					}else{
						this.addForm.permissionAllocationmode = '2';	
						// 直接分配
						this.allocationType = true;
						this.rightsDisabled = true;
					}
					this.formLoading = false;
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		}, 
		// 初始化监控下拉框   listAssignablemonitorServers
		getInitmonitorServers(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
			}
			listAssignablemonitorServers(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.monitorTheaddressData = res.data.data;

					console.log(res.data.data.length);

					this.monitorTheaddressValue = res.data.data.length != 0 ? res.data.data[0].id : '' ;
					this.monitorTheaddressValueCopy = res.data.data.length != 0 ? res.data.data[0].id : '' ;

					this.MonitortherootDirectorynationwide;
					
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		// 流媒体 信息 listAssignablestreamServers
		getInitstreamservers(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
			}
			listAssignablestreamServers(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					console.log('流媒体');
					this.streamingMediadata = res.data.data;
					
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		//权限分组
		getInitrightsGroup(){
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
				"enterprise_user_id": localStorage.userId
			}
			listAssignableenterpriseGroups(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.rightsGroupdata = res.data.data;
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		// 初始化 终端同步的服务器信息
		getuserTerminalserver(){
			userListgetTerminalserver({  "enterprise_id": localStorage.EnterpriseId}).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.termainlServerinfoId = res.data.data ? res.data.data.id : '';
					this.termainlServerinfo = res.data.data;
				}
			});	
		},
		// 初始化 功能分配数据
		getInitpermissionsdata(){
			console.log('功能分配数据');
			// 查询接口
			listAllocablefunctions({  "enterprise_id": localStorage.EnterpriseId}).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					this.permissionsList = res.data.data;
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
		},
		// 分配方式change
		permissionModechange(value){
			if(value == '2'){
				// 状态为直接分配
				this.allocationType = true;
				this.rightsDisabled = true;
				// 清空 所选择的权限分组
				this.rightsGroupvalue = '';
			}else{
				// 权限分配
				this.allocationType = false;
				this.rightsDisabled = false;

				// 判断 当前分组id 是否 为空    rightsGroupvalueCopy
				if(this.rightsGroupvalue == ''){
					this.rightsGroupvalue = this.rightsGroupvalueCopy
				}
			}
		},
		// 分配方式 更新缓存信息
		updateCacheinformation(data){
			this.rightsGroupvalueCopy = data;
		},
		// 流媒体服务器
		streamingMediachange(code){
			console.log(code);
		},
		// 监控地址 change
		monitorAddresschange(value){
			let code = this.monitorTheaddressValueCopy;
			//this.$message
			let _value = value;
			// 是否要切换 服务器地址
			this.$confirm('是否要切换监控地址', '提示', {
				confirmButtonText: '确定',
				cancelButtonText: '取消',
				type: 'warning'
			}).then(() => {
				this.MonitortherootDirectorynationwide();
				this.monitorTheaddressValueCopy = value;
				// 清空当前 所选地区
				this.monitorDefaultchecked = []
				this.monitorDefaultcheckedCopy = []
			}).catch(() => {
				this.$message({
					type: 'info',
					message: '已取消切换'
				});
				this.monitorTheaddressValue = code;

			});
		},
		/* 监控 操作 */
		// 加载监控根节点目录 根据角色区分加载接口  
		MonitortherootDirectorynationwide(){	

			// 判断当前区域是否为全国
			let differentiateSite = distinguishRole();
			console.log(differentiateSite);
			/* 1,3 为区域管理员  REGION_NATIONWIDE 为全国节点 REGION_NON_NATIONWIDE 为 非全国节点
2,4 为企业管理员  SUPER_NATIONWIDE 为全国节点 SUPER_NOO_NATIONWIDE 为非全国节点 */
			if(differentiateSite == 'REGION_NATIONWIDE' || differentiateSite == 'SUPER_NATIONWIDE'){
				// listSuborganizations
				let objData = {
					"area_code": 0,
					"is_root": true,
					"is_security": this.isSecurity,
					"monitor_server_id": this.monitorTheaddressValue,
					"platform_id": 1
				}
				listSuborganizations(objData).then(res => {
					if (res.status === 200 && res.data.result == "ok") {
						this.monitor_resource_organizations = res.data.data
					}else{
						// 错误提示信息
						this.$message.error(res.data.error_description);
					}
				});	
			}else if(differentiateSite == 'REGION_NON_NATIONWIDE' || differentiateSite == 'SUPER_NOO_NATIONWIDE'){
				let objData = {
					"enterprise_id": localStorage.EnterpriseId,
					"enterprise_user_id": localStorage.userId,
					"monitor_server_id": this.monitorTheaddressValue,
				}
				listRootorganizationPaths(objData).then(res => {
					if (res.status === 200 && res.data.result == "ok") {
						console.log(res);
						// 嵌套数组遍历 取值
						// 数组遍历 取第一个添加到数据
						if(res.data.data.length != 0){
							console.log('赋值')
							this.monitorInterfacedataProcessing(res.data.data);
						}else{
							this.monitor_resource_organizations = res.data.data;
						}

					}
				});	
			}
		},
		// 监控根数据修改
		monitorInterfacedataProcessing(){
			// 赋值
			let array = data;	
			let sortingArray = []
			// 多个平台 遍历内容去最后一个节点
			array.map(function(item,index){
				let path = item.path;
				for(let i=0 ,len = path.length;i<len;i++){
					if(i = len - 1){
						sortingArray.push(path[i]);
					}
				}
			});
			this.monitor_resource_organizations = sortingArray;
			console.log(this.monitor_resource_organizations);
		},
		// 监控根目录 懒加载
		monitorTherootDirectoryLoadnode(node, resolve,data){
			if(node.level == 0){
				resolve(this.monitor_resource_organizations);
			}
			
			if (node.level >= 1) {
				// 异步加载
				this.getMonitorchildrenNode(node,resolve)
			}
			
			if(this.monitorDefaultchecked.length != 0){
				// 处理数据 取 unique_code 为数组 纯数组 
				let disArray = this.monitorDefaultchecked;
				let setCheckedkeyArray = []
				for(let i = 0; i < disArray.length; i++){
					setCheckedkeyArray.push(disArray[i].unique_code);
				}
				this.$nextTick(() => {
					this.$refs.monitorTree.setCheckedKeys(setCheckedkeyArray)
				});
			}	
		},
		//  监控  获取二级节点数据
		getMonitorchildrenNode(node,resolve){
			// listSuborganizations
			let objData = {
				"area_code":  node.data.area_code,
				"is_root": false,
				"is_security": this.isSecurity,
				"monitor_server_id": this.monitorTheaddressValue,
				"platform_id": node.data.platform_id
			}
			listSuborganizations(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					resolve(res.data.data);

					let newArry = res.data.data
					// 反选 
					let arrayFx = this.setHalfselectedArray(this.monitorDefaultcheckedCopy,newArry);
					this.$nextTick(() => {
						this.setHalfselected(arrayFx);
					})

					// 监控默认 勾选
					if(this.monitorDefaultchecked.length != 0){
						// 处理数据 取 unique_code 为数组 纯数组 
						let disArray = this.monitorDefaultchecked;
						let setCheckedkeyArray = []
						for(let i = 0; i < disArray.length; i++){
							setCheckedkeyArray.push(disArray[i].unique_code);
						}
						this.$nextTick(() => {
							this.$refs.monitorTree.setCheckedKeys(setCheckedkeyArray)
						});
					}
				}else{
					// 错误提示信息
					this.$message.error(res.data.error_description);
				}
			});	
			
		},
		// 监控渲染
		renderMonitor(h, { node, data, store }){
			return (
				<span 
				style="flex: 1; display: flex; align-items: center; justify-content: 
				space-between; font-size: 14px; padding-right: 8px;">
				<span>
					<span class={data.unique_code} style={{color: (data.isMerge) ? "#57e29b" : "#fff"}}>{node.label}</span>
				</span>
				<span>
					</span>
				</span>
			)
		},
		// 监控 勾选 数据监听
		monitorCheckchangdata(data, type, childState){
			// 选中的数组 默认勾选 直接添加

			let checkArray = [];
			let _data = data;
			checkArray.push(data);
			
			if(type){
				// 新增需要删除 缓存数据中所有子节点数据
				let clearChildarray = this.monitorDefaultchecked;

				// 清除子节点数据 当前节点都为父节点  区域方法
				// 当前节点的 区域 code 字符串 
				// region_code 可能不存在
				let currentCode = _data.region_code ?  _data.region_code  :  _data.area_code ;

				clearChildarray.map(function(item,index){
					if(item.region_full_code){
						let splitArray =  item.region_full_code.split('|');

						if(splitArray.indexOf(currentCode) != -1){
							clearChildarray.splice(index, 1);
						}
					}
				})

				// 添加当前选中的数据  合并 去重
				this.monitorDefaultchecked = arrayObjdeweighting(this.monitorDefaultchecked,checkArray,'unique_code')


			}else{
				//console.log("删除");
				// 减 遍历删除
				checkArray.forEach(itemData => {
					this.monitorDefaultchecked.forEach((itemArr, index) => {
						if (itemData.unique_code == itemArr.unique_code) {
							this.monitorDefaultchecked.splice(index, 1);
						}
					});
				});
			}
		},
		/* 监控 操作 */
		/* 终端 功能 */
		// 终端  初始化 根节点 数据   getRootterminalRegion
		getTerminalrootNodedirectory(){
			console.log('终端接口');
			let objData = {
				"enterprise_id": localStorage.EnterpriseId,
				"enterprise_user_id": localStorage.userId,
			}
			getRootterminalRegion(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					console.log(res);
					this.terminal_regions = res.data.data;
				}
			});	
		},
		// 终端 懒加载
		terminaLoadnode(node, resolve){
			if (node.level === 0) {
				resolve(this.terminal_regions);
			}
			
			if(node.level >= 1) { // 二级节点
				// 异步加载
				this.getTermianloadNode(node,resolve)
			}
			// 终端 勾选默认数据
			if(this.terminalDefaultchecked.length != 0){
				// 处理数据 取 unique_code 为数组 纯数组 
				let disArray = this.terminalDefaultchecked;
				let setCheckedkeyArray = []
				for(let i = 0; i < disArray.length; i++){
					setCheckedkeyArray.push(disArray[i].unique_code);
				}
				this.$nextTick(() => {
					this.$refs.terminaTree.setCheckedKeys(setCheckedkeyArray)
				});
			}
		},
		getTermianloadNode(node,resolve){
			let _this = this;
			let _node = node
			// 区分父级节点是否为区域
			if(node.data.unit_id){
				//  加载子单位
				if(node.data.unit_id != '-1'){
					let objData = {
						"terminal_server_id": this.termainlServerinfoId,
						"unit_pid": node.data.unit_id
					}
					// 异步函数加载 子节点   单位
					listSubterminalDeparts(objData).then(res => {
						if (res.status === 200 && res.data.result == "ok") {
							let  childArray = res.data.data
							childArray.map(function(item,inde){	
								item.isMerge = true;
							})

							if(_node.checked){
								childArray.map(function(item,index){
									_this.terminalDefaultchecked.push(item);
								});
							}
							resolve(childArray);
							// 渲染后将 单位的选择框隐藏
							this.$nextTick(() => {
								this.uncheckThecheckbox(directArray);
							})
							// 终端 勾选默认数据
							if(this.terminalDefaultchecked.length != 0){
								// 处理数据 取 unique_code 为数组 纯数组 
								let disArray = this.terminalDefaultchecked;
								let setCheckedkeyArray = []
								for(let i = 0; i < disArray.length; i++){
									setCheckedkeyArray.push(disArray[i].unique_code);
								}
								this.$nextTick(() => {
									this.$refs.terminaTree.setCheckedKeys(setCheckedkeyArray)
								});
							}
						}
					});

				}else{
					resolve([]);
				}
			}else{
				// termainlServerinfoId
				// 区域
				let objData = {
						"parent_region_code": node.data.region_code,
  						"terminal_server_id": this.termainlServerinfoId
				}
				// 终端通讯录区域子节点 包括 区域和单位
				listSubterminalRegionsandDeparts(objData).then(res => {
					if (res.status === 200 && res.data.result == "ok") {
						let directArray = [];
						let subTerminalarray = [];
						let newArry = [];
						if(res.data.data.direct_terminal_departs.length != 0){
							directArray = res.data.data.direct_terminal_departs;
						}else{
							directArray = [];
						}
						if(res.data.data.sub_terminal_regions.length != 0){
							subTerminalarray = res.data.data.sub_terminal_regions;
						}else{
							subTerminalarray = []
						}
						// 遍历添加标记 单位
						directArray.map(function(item,index){
							item.isMerge = true;
						})
						//	 合并数组
						newArry = subTerminalarray.concat(directArray)
						// 渲染数组集合
						// 如果 父节点为勾选 则需要将获取的所有子节点 添加到缓存数组中
						if(_node.checked){
							newArry.map(function(item,index){
								_this.terminalDefaultchecked.push(item);
							});
						}
						// 合并渲染tree	
						resolve(newArry);

						// 渲染后将 单位的选择框隐藏
						this.$nextTick(() => {
							this.uncheckThecheckbox(directArray);
						})

						// 反选 
						let arrayFx = this.setHalfselectedArray(this.terminalDefaultcheckedCopy,newArry);
						this.$nextTick(() => {
							this.setHalfselected(arrayFx);
						})

						// 终端 勾选默认数据
						if(this.terminalDefaultchecked.length != 0){
							// 处理数据 取 unique_code 为数组 纯数组 
							let disArray = this.terminalDefaultchecked;
							let setCheckedkeyArray = []
							for(let i = 0; i < disArray.length; i++){
								setCheckedkeyArray.push(disArray[i].unique_code);
							}
							this.$nextTick(() => {
								this.$refs.terminaTree.setCheckedKeys(setCheckedkeyArray)
							});
						}
					}
				});	
			}	
		},
		// 终端渲染
		renderContent(h, { node, data, store }) {
			return (
				<span 
				style="flex: 1; display: flex; align-items: center; justify-content: 
				space-between; font-size: 14px; padding-right: 8px;">
				<span>
					<span class={data.unique_code} style={{color: (data.isMerge) ? "#f7e59a" : "#fff"}}>{node.label}</span>
				</span>
				<span>
					</span>
				</span>
			)
			
		},
		// 终端勾选 数据监听 
		termianCheckchangdata(data, type, childState){
			// terminalDefaultchecked
			// 选中的数组 默认勾选 直接添加
			let checkArray = [];
			let _data = data;
			checkArray.push(data);
			

			if(type){
				//console.log('新增')
				let clearChildarray = this.terminalDefaultchecked;

				// 清除子节点数据 当前节点都为父节点  区域方法

				let currentCode = _data.region_code // 当前节点的 区域 code 字符串 

				clearChildarray.map(function(item,index){
					if(item.region_full_code){
						item.region_full_code
						let splitArray =  item.region_full_code.split('|');
						if(splitArray.indexOf(currentCode) != -1){
							clearChildarray.splice(index, 1);
						}
					}
				})
				

				// 添加当前选中的数据 去重
				this.terminalDefaultchecked = arrayObjdeweighting(this.terminalDefaultchecked,checkArray,'unique_code')
				

			}else{
				//console.log("删除");
				// 减 遍历删除
				checkArray.forEach(itemData => {
					this.terminalDefaultchecked.forEach((itemArr, index) => {
						if (itemData.unique_code === itemArr.unique_code) {
							this.terminalDefaultchecked.splice(index, 1);
						}
					});
				});
			}
			/* console.log('勾选数据');
			console.log(this.terminalDefaultchecked); */

		},
		// 终端 清除勾选信息
		clearTerminatree(){
			this.$refs.terminaTree.setCheckedKeys([]);	// 监控资源
		},
		/* 终端 功能 */
		// 保存/通过
		childSavedata(){
			// 根据页面来源 直接访问接口
			// type  userceck / userlist
			if(this.pageSourcedata == 'USERLIST'){
				// userListsavePrivileges
				let objData = this.userListparameters();
				// 当前用户id
				objData.enterprise_user_id = this.enterpriseUserid; 

				userListsavePrivileges(objData).then(res => {
					if (res.status === 200 && res.data.result == "ok") {
						this.cancelNewdata();
					}else{
						// 错误提示信息
						this.$message.error(res.data.error_description);
					}
				});	
			}else if(this.pageSourcedata == 'USERCHECK'){

				let objData = this.userListparameters();
				
				// 企业用户申请事件ID
				objData.enterprise_apply_event_id = this.enterprise_apply_event_id
				objData.processor_id =  localStorage.userId
				apply_event_approve(objData).then(res => {
					if (res.status === 200 && res.data.result == "ok") {
						this.cancelNewdata();
						// 刷新列表事件
						this.$emit('refreshList');
					}else{
						// 错误提示信息
						this.$message.error(res.data.error_description);
					}
				});	
			}
		},
		// 参数整理
		userListparameters(){
			let _this = this;
			let objData = {
				"allocated_functions": this.permissionsListvalue,	
				"enterprise_group_id": this.rightsGroupvalue,	
				/* // 企业用户id 当前点击的用户ID	/  企业用户申请事件ID			
				"enterprise_user_id": this.enterpriseUserid, */
				"monitor_server_id": this.monitorTheaddressValue,
				"realname": this.addForm.realname,
				"stream_server_ids": this.streamingMediavalue,
				"user_type": this.prisegRoupsvalue,
			}	
			// 监控字端赋值
			if(this.monitorDefaultchecked != []){
				let newArray = [];

				this.monitorDefaultchecked.map(function(item,index){
					let obj = {};
					obj.region_name = item.name
					obj.region_code = item.area_code
					obj.platform_id = item.platform_id
					obj.security = _this.isSecurity;
					newArray.push(obj);
				})
				objData.monitor_resource_organizations = newArray;
			}
			// 终端 字端赋值
			if(this.terminalDefaultchecked != []){
				let newArray = []
				this.terminalDefaultchecked.map(function(item,index){
					let obj = {};
					obj.region_name = item.name;
					obj.region_code = item.region_code;
					obj.unique_code = item.unique_code;
					// 判断是否为单位 删除单位字端
					if(item.isMerge){
						obj.unit_id = item.unit_id
					}
					newArray.push(obj);
				})
				// 删除单位字端
				for (let i = newArray.length - 1; i >= 0; i--) {
					if (newArray[i].unit_id) {
						newArray.splice(i, 1);
					}
				}
				newArray = arrayObjdeweighting([],newArray,'unique_code');
				objData.terminal_regions = newArray ? newArray : [];
			}
			console.log(objData.terminal_regions);

			return objData;
		},
		/* 地区选中相关函数 */
		// 地区 加载函数
		regionFulltree(node,resolve){
			if (node.level === 0) {
				return resolve([this.InitRegionfulldata]);
			}
			// 全国节点 下拉数据
			let objData = {
					"pid": node.data.id
				}
			getRegionsbyPid(objData).then(res => {
				if (res.status === 200 && res.data.result == "ok") {
					resolve(res.data.data.regions)
				}
			});	
		},
		// 同步地区数据
		synchronouRegionsdata(data){
			// 查询详情接口 递归查询所有父节点
			// 全国除外
			if(data.id != "000000000000"){
				let objData = {
					"id": data.id,
					"timestamp": 0
				}
				// 获取地区详情
				getRegiondetail(objData).then(res => {
					if (res.status === 200 && res.data.result == "ok") {
						// 当前点击的数据获取的数据
						this.information.region_full_name = res.data.data.region_details[0].names;
						this.information.region_full_code = res.data.data.region_details[0].ids;
						// 当前点击的数据
						this.information.region_code = data.id
						this.information.region_name = data.name
					}
				});	
			}else{
				// 同步数据
				this.information.region_full_name = '全国';
				this.information.region_full_name_ids = '000000000000';
				// 当前点击的数据
				this.information.region_code = '000000000000'
				this.information.region_name ='全国'
			}
			
		},
		// 地区下拉关闭按钮
		closeShowregionFulldata(){
			this.isShowregionFulldata = false;
		},
		//  关闭弹窗
		cancelNewdata(){
			// 清空 数据 
			this.permissionsListvalue = [];
			this.rightsGroupvalue = '';
			this.monitorTheaddressValue = '';
			this.monitorTheaddressValueCopy = '';
			this.addForm.realname = '';
			this.streamingMediavalue = [];
			this.prisegRoupsvalue = '';
			// 分配方式
			this.addForm.permissionAllocationmode = '';
			this.monitorDefaultchecked = [];
			this.terminalDefaultchecked = [];
			this.formLoading = true;
			// 可选内容
			// 关闭
			this.information.region_full_name = '';
			this.allocationType = false;
			this.activeName = 'first';
			// 地区下拉弹窗
			this.isShowregionFulldata = false;
			this.$emit('assignPopclose',false);
		},
		// 返回 半勾选数组  cacheArray  缓存     loadArray 加载
		setHalfselectedArray(cacheArray,loadArray){
			// 然后 半勾选数组
			// 调用 半勾选方法
			// 获取 初始化数据
			let defaultArray = loadArray;
			// 获取 缓存勾选的数组
			let defaultCheckedarray = cacheArray;
			// 半勾选数组
			let halfSelectedarray = [];

			defaultArray.map(function(item,index){
				let regionCode = item.region_code ? item.region_code : item.area_code;
				defaultCheckedarray.map(function(item2,index2){
					// 拆分数组 
					if(item2.region_full_code != undefined){
						let splitArray =  item2.region_full_code.split('|')
						// 过滤掉 单位
						if(!item.isMerge){
							if(splitArray.indexOf(regionCode) != -1){
								halfSelectedarray.push(item)
							}
						}
					}else{
						return false;
					}
				
					
				})
			})
			return halfSelectedarray;
		},
		// 半勾选方法 jquery
		setHalfselected(array){
			// 去重  
			let newArray = arrayObjdeweighting([],array,'unique_code');
			// 遍历添加 class 虚拟 class
			newArray.map(function(item,index){
				let $checkBosinput = $('#commonPopchild').find('.'+item.unique_code).parents('.el-tree-node__content').find('.el-checkbox').find('.el-checkbox__input');
					
					if($checkBosinput.hasClass('is-checked')){
						return false;
					}else{
						$checkBosinput.addClass("is-indeterminate")
					}
			})
		},
		// 找到所有的 单位 进行取消勾选框的操作
		uncheckThecheckbox(data){
			console.log(data);
			let newArray = data;
			newArray.map(function(item,index){
				let $elCheckbox = $('#commonPopchild').find('.'+item.unique_code).parents('.el-tree-node__content').find('.el-checkbox').find('.el-checkbox__input');
				$elCheckbox.css('display','none');
			})
		}
	},
	watch:{
		assignPopeditData:function(newVal,oldVal){
			this.gainFromparentData = newVal;
		},
		pageSource:function(newVal,oldVal){
			this.gainFromparentPath = newVal;
		},
	}
};
</script>
<style scoped>
.termianServer span{
	font-size: 14px;
	color: #57e29b;
}
</style>